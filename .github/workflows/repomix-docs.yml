name: Generate Documentation

on:
  schedule:
    - cron: '0 0 */2 * *'  # Runs every 2 days at midnight UTC
  push:
    branches:
      - main
      - repomix
  workflow_dispatch:  # Allows manual triggering

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.DOCS_PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Repomix
        run: npm install -g repomix

      - name: Generate WAVS Foundry Template Documentation
        run: repomix --remote Lay3rLabs/wavs-foundry-template -o public/wavs-foundry-template.md --style markdown

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Generate Rust Crate Documentation
        run: |
          # Install html2md
          cargo install html2md
          
          # Clone the wavs-wasi repo using the token
          git clone https://${{ secrets.DOCS_PAT }}@github.com/Lay3rLabs/wavs-wasi.git
          cd wavs-wasi/packages/wavs-wasi-utils
          
          # Build the docs
          echo "Building docs with cargo..."
          cargo doc --no-deps
          
          # Create temporary directory for markdown files
          TEMP_DIR=$(mktemp -d)
          
          # Start with the main index file
          echo "# WAVS WASI Utils Documentation" > "$TEMP_DIR/main.md"
          echo "\nThis documentation is generated from the \`wavs-wasi-utils\` crate.\n" >> "$TEMP_DIR/main.md"
          
          # Process the main index first
          html2md "../../target/doc/wavs_wasi_utils/index.html" >> "$TEMP_DIR/main.md"
          
          # Process each module and function
          DOC_DIR="../../target/doc/wavs_wasi_utils"
          
          # Process modules in order
          for module in evm http; do
            if [ -f "$DOC_DIR/$module/index.html" ]; then
              echo "\n## $module Module\n" >> "$TEMP_DIR/main.md"
              html2md "$DOC_DIR/$module/index.html" >> "$TEMP_DIR/main.md"
              
              # Process functions in this module
              for func_file in "$DOC_DIR/$module/fn."*.html; do
                if [ -f "$func_file" ]; then
                  func_name=$(basename "$func_file" .html | sed 's/fn\.//')
                  echo "\n### $func_name\n" >> "$TEMP_DIR/main.md"
                  html2md "$func_file" >> "$TEMP_DIR/main.md"
                fi
              done
              
              # Process submodules
              for submodule in "$DOC_DIR/$module"/*/; do
                if [ -d "$submodule" ] && [ -f "$submodule/index.html" ]; then
                  submodule_name=$(basename "$submodule")
                  echo "\n### $submodule_name Submodule\n" >> "$TEMP_DIR/main.md"
                  html2md "$submodule/index.html" >> "$TEMP_DIR/main.md"
                  
                  # Process functions in submodule
                  for func_file in "$submodule/fn."*.html; do
                    if [ -f "$func_file" ]; then
                      func_name=$(basename "$func_file" .html | sed 's/fn\.//')
                      echo "\n#### $func_name\n" >> "$TEMP_DIR/main.md"
                      html2md "$func_file" >> "$TEMP_DIR/main.md"
                    fi
                  done
                fi
              done
            fi
          done
          
          # Process macros
          if [ -d "$DOC_DIR/macro" ]; then
            echo "\n## Macros\n" >> "$TEMP_DIR/main.md"
            for macro_file in "$DOC_DIR/macro."*.html; do
              if [ -f "$macro_file" ]; then
                macro_name=$(basename "$macro_file" .html | sed 's/macro\.//')
                echo "\n### $macro_name\n" >> "$TEMP_DIR/main.md"
                html2md "$macro_file" >> "$TEMP_DIR/main.md"
              fi
            done
          fi
          
          # Copy the final markdown file
          cp "$TEMP_DIR/main.md" ../../../public/wavs-wasi-utils.md
          
          # Clean up
          cd ../../..
          rm -rf wavs-wasi "$TEMP_DIR"

      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add public/wavs-foundry-template.md public/wavs-wasi-utils.md
          git commit -m "Update documentation" || exit 0
          git push
